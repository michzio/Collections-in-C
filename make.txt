# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries
# custom
COMPARERS_LIBRARY = ../comparers/output/debug/lib/static/libcomparers.a
UNIT_TESTS_LIBRARY = ../unit_tests/output/debug/lib/static/libunit_tests.a

# source files 
SOURCE_FILES = hash_map.o int_hash_map.o str_hash_map.o doubly_linked_list.o linked_list.o allocator.o data_handler.o

# test source files
TEST_SOURCE_FILES = test_hash_map.o test_int_hash_map.o test_linked_list.o test_str_hash_map.o test_doubly_linked_list.o

# the build target executable: 
TARGET = collections
LIBRARY = libcollections.a
SHARED_LIBRARY = libcollections.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libcollections.dylib
else 
	DYNAMIC_LIBRARY=
endif

# output directories 
OUTPUT_DIR = output/debug
OUTPUT_LIB_DIR = $(OUTPUT_DIR)/lib
OUTPUT_STATIC_LIB_DIR = $(OUTPUT_LIB_DIR)/static
OUTPUT_BIN_DIR = $(OUTPUT_DIR)/bin
OUTPUT_TEST_DIR = $(OUTPUT_DIR)/test

all: directories libraries $(TARGET)

# make output directories
directories: 
	@mkdir -p $(OUTPUT_DIR)
	@mkdir -p $(OUTPUT_LIB_DIR)
	@mkdir -p $(OUTPUT_STATIC_LIB_DIR)
	@mkdir -p $(OUTPUT_BIN_DIR)
	@mkdir -p $(OUTPUT_TEST_DIR)

libraries: $(LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)  
	$(CC) $(CFLAGS) -o $(OUTPUT_BIN_DIR)/$(TARGET) main.c $(OUTPUT_TEST_DIR)/*.o $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(COMPARERS_LIBRARY) $(UNIT_TESTS_LIBRARY)

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUT_STATIC_LIB_DIR)/$(LIBRARY) $(OUTPUT_DIR)/*.o

hash_map.o: hash_map/hash_map.c hash_map/hash_map.h
	$(CC) $(CFLAGS) -c hash_map/hash_map.c -o $(OUTPUT_DIR)/hash_map.o

int_hash_map.o: hash_map/int_hash_map.c hash_map/int_hash_map.h 
	$(CC) $(CFLAGS) -c hash_map/int_hash_map.c -o $(OUTPUT_DIR)/int_hash_map.o

str_hash_map.o: hash_map/str_hash_map.c hash_map/str_hash_map.h 
	$(CC) $(CFLAGS) -c hash_map/str_hash_map.c -o $(OUTPUT_DIR)/str_hash_map.o

doubly_linked_list.o: linked_list/doubly_linked_list.c linked_list/doubly_linked_list.h 
	$(CC) $(CFLAGS) -c linked_list/doubly_linked_list.c -o $(OUTPUT_DIR)/doubly_linked_list.o

linked_list.o: linked_list/linked_list.c linked_list/linked_list.h 
	$(CC) $(CFLAGS) -c linked_list/linked_list.c -o $(OUTPUT_DIR)/linked_list.o

allocator.o: common/allocator.c common/allocator.h
	$(CC) $(CFLAGS) -c common/allocator.c -o $(OUTPUT_DIR)/allocator.o

data_handler.o: common/data_handler.c common/data_handler.h
	$(CC) $(CFLAGS) -c common/data_handler.c -o $(OUTPUT_DIR)/data_handler.o

test_hash_map.o: test/test_hash_map.c test/test_hash_map.h 
	$(CC) $(CFLAGS) -c test/test_hash_map.c -o $(OUTPUT_TEST_DIR)/test_hash_map.o

test_int_hash_map.o: test/test_int_hash_map.c test/test_int_hash_map.h
	$(CC) $(CFLAGS) -c test/test_int_hash_map.c -o $(OUTPUT_TEST_DIR)/test_int_hash_map.o

test_linked_list.o: test/test_linked_list.c test/test_linked_list.h
	$(CC) $(CFLAGS) -c test/test_linked_list.c -o $(OUTPUT_TEST_DIR)/test_linked_list.o

test_str_hash_map.o: test/test_str_hash_map.c test/test_str_hash_map.h 
	$(CC) $(CFLAGS) -c test/test_str_hash_map.c -o $(OUTPUT_TEST_DIR)/test_str_hash_map.o

test_doubly_linked_list.o: test/test_doubly_linked_list.c test/test_doubly_linked_list.h
	$(CC) $(CFLAGS) -c test/test_doubly_linked_list.c -o $(OUTPUT_TEST_DIR)/test_doubly_linked_list.o

clean: 
	$(RM) -rf $(OUTPUT_DIR)