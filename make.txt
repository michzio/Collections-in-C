# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries
# custom
COMPARERS_LIB_DIR=../comparers/outputs/debug/lib
COMPARERS_STATIC_LIB_PATH=$(COMPARERS_LIB_DIR)/libcomparers.a
# executable's libraries
UNIT_TESTS_STATIC_LIB_PATH=../unit_tests/outputs/debug/lib/libunit_tests.a

# include directories
INCLUDE_DIRS= ./include ../comparers/include ../common/include ../unit_tests/include
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable: 
TARGET = collections
LIBRARY = libcollections.a
SHARED_LIBRARY = libcollections.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libcollections.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files
SOURCE_FILES = hash_map.o int_hash_map.o str_hash_map.o doubly_linked_list.o linked_list.o allocator.o data_handler.o

# test source files
TEST_SOURCE_FILES = test_hash_map.o test_int_hash_map.o test_linked_list.o test_int_linked_list.o test_str_hash_map.o test_doubly_linked_list.o

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin
OUTPUTS_TEST_DIR = $(OUTPUTS_DIR)/test

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)
	@mkdir -p $(OUTPUTS_TEST_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)  
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_TEST_DIR)/*.o $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(COMPARERS_STATIC_LIB_PATH) $(UNIT_TESTS_STATIC_LIB_PATH)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(COMPARERS_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o -lcomparers

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(COMPARERS_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o -lcomparers

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

hash_map.o: src/hash_map/hash_map.c include/hash_map/hash_map.h
	$(CC) $(CFLAGS) -c src/hash_map/hash_map.c -o $(OUTPUTS_DIR)/hash_map.o

int_hash_map.o: src/hash_map/int_hash_map.c include/hash_map/int_hash_map.h
	$(CC) $(CFLAGS) -c src/hash_map/int_hash_map.c -o $(OUTPUTS_DIR)/int_hash_map.o

str_hash_map.o: src/hash_map/str_hash_map.c include/hash_map/str_hash_map.h
	$(CC) $(CFLAGS) -c src/hash_map/str_hash_map.c -o $(OUTPUTS_DIR)/str_hash_map.o

doubly_linked_list.o: src/linked_list/doubly_linked_list.c include/linked_list/doubly_linked_list.h
	$(CC) $(CFLAGS) -c src/linked_list/doubly_linked_list.c -o $(OUTPUTS_DIR)/doubly_linked_list.o

linked_list.o: src/linked_list/linked_list.c include/linked_list/linked_list.h
	$(CC) $(CFLAGS) -c src/linked_list/linked_list.c -o $(OUTPUTS_DIR)/linked_list.o

allocator.o: src/common/allocator.c include/common/allocator.h
	$(CC) $(CFLAGS) -c src/common/allocator.c -o $(OUTPUTS_DIR)/allocator.o

data_handler.o: src/common/data_handler.c include/common/data_handler.h
	$(CC) $(CFLAGS) -c src/common/data_handler.c -o $(OUTPUTS_DIR)/data_handler.o

test_hash_map.o: test/test_hash_map.c test/test_hash_map.h 
	$(CC) $(CFLAGS) -c test/test_hash_map.c -o $(OUTPUTS_TEST_DIR)/test_hash_map.o

test_int_hash_map.o: test/test_int_hash_map.c test/test_int_hash_map.h
	$(CC) $(CFLAGS) -c test/test_int_hash_map.c -o $(OUTPUTS_TEST_DIR)/test_int_hash_map.o

test_linked_list.o: test/test_linked_list.c test/test_linked_list.h
	$(CC) $(CFLAGS) -c test/test_linked_list.c -o $(OUTPUTS_TEST_DIR)/test_linked_list.o

test_int_linked_list.o: test/test_int_linked_list.c test/test_int_linked_list.h
	$(CC) $(CFLAGS) -c test/test_int_linked_list.c -o $(OUTPUTS_TEST_DIR)/test_int_linked_list.o

test_str_hash_map.o: test/test_str_hash_map.c test/test_str_hash_map.h 
	$(CC) $(CFLAGS) -c test/test_str_hash_map.c -o $(OUTPUTS_TEST_DIR)/test_str_hash_map.o

test_doubly_linked_list.o: test/test_doubly_linked_list.c test/test_doubly_linked_list.h
	$(CC) $(CFLAGS) -c test/test_doubly_linked_list.c -o $(OUTPUTS_TEST_DIR)/test_doubly_linked_list.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)